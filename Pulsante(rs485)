/*
 * File:   main.c
 * Author: Utente
 *
 * Created on 7 giugno 2019, 15.37
 */
#pragma config FPLLIDIV = DIV_2 // PLL Input Divider (1x Divider)
#pragma config FPLLMUL = MUL_20 // PLL Multiplier (24x Multiplier)
#pragma config UPLLIDIV = DIV_2 // USB PLL Input Divider (12x Divider)
#pragma config UPLLEN = OFF // USB PLL Enable (Disabled and Bypassed)
#pragma config FPLLODIV = DIV_1 // System PLL Output Clock Divider (PLL Divide by 256)
// DEVCFG1
#pragma config FNOSC = PRIPLL // Oscillator Selection Bits (Primary Osc w/PLL (XT+,HS+,EC+PLL))
#pragma config FSOSCEN = ON // Secondary Oscillator Enable (Enabled)
#pragma config IESO = ON // Internal/External Switch Over (Enabled)
#pragma config POSCMOD = HS // Primary Oscillator Configuration (HS osc mode)
#pragma config OSCIOFNC = ON // CLKO Output Signal Active on the OSCO Pin (Enabled)
#pragma config FPBDIV = DIV_8 // Peripheral Clock Divisor (Pb_Clk is Sys_Clk/8)
#pragma config FCKSM = CSDCMD // Clock Switching and Monitor Selection (Clock Switch Disable, FSCM Disabled)
#pragma config WDTPS = PS1048576 // Watchdog Timer Postscaler (1:1048576)
#pragma config FWDTEN = OFF // Watchdog Timer Enable (WDT Disabled (SWDTEN Bit Controls))
// DEVCFG0
#pragma config DEBUG = OFF // Background Debugger Enable (Debugger is disabled)
#pragma config ICESEL = ICS_PGx2 // ICE/ICD Comm Channel Select (ICE EMUC2/EMUD2 pins shared with PGC2/PGD2)
#pragma config PWP = OFF // Program Flash Write Protect (Disable)
#pragma config BWP = OFF // Boot Flash Write Protect bit (Protection Disabled)
#pragma config CP = OFF

#include <p32xxxx.h>
#include <plib.h>

#define SYSCLK 80000000
#define DESIRED_BAUDRATE 9600

//void initializeUART(){
// Optimize PIC32 performance and return peripheral bus frequency
//double pbClk=SYSTEMConfig( SYSCLK, SYS_CFG_WAIT_STATES | SYS_CFG_PCACHE);
// Abilita UART1 and set baud rate to DESIRED_BAUDRATE=9600
//OpenUART1( UART_EN, UART_RX_ENABLE | UART_TX_ENABLE, pbClk/16/BAUD_VALUE-1);
//while( BusyUART1()); // Attendo che il modulo UART sia libero
//}

void delay(int t){
    int n = t*1900;
    while (n > 0) {n--;}
}

void main(void) {
    //TRISD = 0x0000; //Abbiamo definito le due porte fisse per l'output
    TRISG = 0x0000;
    TRISGbits.TRISG6 = 1;
    TRISDbits.TRISD6 = 0;
    TRISDbits.TRISD5 = 0;
    LATDbits.LATD5 = 0;
    
    // Optimize PIC32 performance and return peripheral bus frequency
 unsigned int pbClk=SYSTEMConfig( SYSCLK, SYS_CFG_WAIT_STATES | SYS_CFG_PCACHE);
 // Abilita UART1 and set baud rate to DESIRED_BAUDRATE=9600
 OpenUART1( UART_EN, UART_RX_ENABLE | UART_TX_ENABLE, pbClk/16/DESIRED_BAUDRATE-1);
 ConfigIntUART1(UART_INT_PR2 | UART_RX_INT_EN | UART_TX_INT_EN);

// Must enable glocal interrupts - in this case, we are using multi-vector mode
INTEnableSystemMultiVectoredInt(); 
 while( BusyUART1()); // Attendo che il modulo UART sia libero
    
    //int old_button = 0;
    //int oldButtonState = 0;  
    //int oldPortG = PORTGbits.RG6 & 1;
    int button = 0;
    
    while(1){
        if ((!(PORTGbits.RG6)) && button == 0 ){
            delay(10);
            if (!(PORTGbits.RG6)){
                button = 1;
            }
        }               
        
       else if ( (!(PORTGbits.RG6 & 1)) && button == 1 ){
            delay(10);
            if (!(PORTGbits.RG6 & 1)){
                button = 0;
            }
        }
         
        
        if (button == 1){
            LATDbits.LATD5 =1;
            putcUART1('a');
            while(BusyUART1());
            LATDbits.LATD5 = 0;
            button = 0;
            LATDbits.LATD6 = ~LATDbits.LATD6;
        }
        
        button = !PORTGbits.RG6;
        
    }
    return;
}

// UART 1 interrupt handler
// it is set at priority level 2
void __ISR(_UART1_VECTOR, ipl2) IntUart1Handler(void)
{
// Is this an RX interrupt?
    if(mU1RXGetIntFlag())
    {
         char data = (char)ReadUART1();
        
        if (data == 'a')
          {
              LATDbits.LATD6 = 1;
          }
          if (data == 'z')
          {
              LATDbits.LATD6 = 0;
          }
// Clear the RX interrupt Flag
        mU1RXClearIntFlag();
// Echo what we just received.
        //putcUART1(ReadUART1());
    }
// We don't care about TX interrupt
    if ( mU1TXGetIntFlag() )
    {
    mU1TXClearIntFlag();
    }
}
