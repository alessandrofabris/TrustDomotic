/*
 * File:   main.c
 * Author: Utente
 *
 * Created on 3 luglio 2019, 10.25
 */

#pragma config FPLLIDIV = DIV_2 // PLL Input Divider (1x Divider)
#pragma config FPLLMUL = MUL_20 // PLL Multiplier (24x Multiplier)
#pragma config UPLLIDIV = DIV_2 // USB PLL Input Divider (12x Divider)
#pragma config UPLLEN = OFF // USB PLL Enable (Disabled and Bypassed)
#pragma config FPLLODIV = DIV_1 // System PLL Output Clock Divider (PLL Divide by 256)
// DEVCFG1
#pragma config FNOSC = PRIPLL // Oscillator Selection Bits (Primary Osc w/PLL (XT+,HS+,EC+PLL))
#pragma config FSOSCEN = ON // Secondary Oscillator Enable (Enabled)
#pragma config IESO = ON // Internal/External Switch Over (Enabled)
#pragma config POSCMOD = HS // Primary Oscillator Configuration (HS osc mode)
#pragma config OSCIOFNC = ON // CLKO Output Signal Active on the OSCO Pin (Enabled)
#pragma config FPBDIV = DIV_8 // Peripheral Clock Divisor (Pb_Clk is Sys_Clk/8)
#pragma config FCKSM = CSDCMD // Clock Switching and Monitor Selection (Clock Switch Disable, FSCM Disabled)
#pragma config WDTPS = PS1048576 // Watchdog Timer Postscaler (1:1048576)
#pragma config FWDTEN = OFF // Watchdog Timer Enable (WDT Disabled (SWDTEN Bit Controls))
// DEVCFG0
#pragma config DEBUG = OFF // Background Debugger Enable (Debugger is disabled)
#pragma config ICESEL = ICS_PGx2 // ICE/ICD Comm Channel Select (ICE EMUC2/EMUD2 pins shared with PGC2/PGD2)
#pragma config PWP = OFF // Program Flash Write Protect (Disable)
#pragma config BWP = OFF // Boot Flash Write Protect bit (Protection Disabled)
#pragma config CP = OFF

#include <p32xxxx.h>
#include <plib.h>

#define SYSCLK 80000000
#define DESIRED_BAUDRATE 9600
#define INDIRIZZO '1'

//void initializeUART(){
// Optimize PIC32 performance and return peripheral bus frequency
//double pbClk=SYSTEMConfig( SYSCLK, SYS_CFG_WAIT_STATES | SYS_CFG_PCACHE);
// Abilita UART1 and set baud rate to DESIRED_BAUDRATE=9600
//OpenUART1( UART_EN, UART_RX_ENABLE | UART_TX_ENABLE, pbClk/16/BAUD_VALUE-1);
//while( BusyUART1()); // Attendo che il modulo UART sia libero
//}

int i = 0;
char sender_rx = '0';
char receiver_rx = '0';
char command = '0';
char payload = '0';


void delay(int t){
    int n = t*1900;
    while (n > 0) {n--;}
}

void main(void) {
    //TRISD = 0x0000; //Abbiamo definito le due porte fisse per l'output
    TRISG = 0x0000;
    TRISGbits.TRISG6 = 1;
    TRISDbits.TRISD6 = 0;
    TRISDbits.TRISD5 = 0;
    LATDbits.LATD5 = 0;
    
    
    //D12 -> G7
    // Optimize PIC32 performance and return peripheral bus frequency
 unsigned long int pbClk=SYSTEMConfig( SYSCLK, SYS_CFG_WAIT_STATES | SYS_CFG_PCACHE);
 // Abilita UART1 and set baud rate to DESIRED_BAUDRATE=9600
 OpenUART1( UART_EN, UART_RX_ENABLE | UART_TX_ENABLE, pbClk/16/DESIRED_BAUDRATE-1);
 ConfigIntUART1(UART_INT_PR2 | UART_RX_INT_EN | UART_TX_INT_EN);  //| UART_TX_INT_EN

// Must enable glocal interrupts - in this case, we are using multi-vector mode
INTEnableSystemMultiVectoredInt(); 


 while (1)
 {   
     if (receiver_rx == INDIRIZZO )
     {
         switch (command)
         {
            case 'A':
                LATDbits.LATD6 = ~LATDbits.LATD6;
                receiver_rx = '0';
                break;
             case 'B':
                LATDbits.LATD6 = ~LATDbits.LATD6;
                receiver_rx = '0';
                break;
             case 'c':
                 //come invio il dato?
                 break;
         }   
     }
 }

    return;
}


// UART 1 interrupt handler
// it is set at priority level 2
void __ISR(_UART1_VECTOR, ipl2) IntUart1Handler(void)
{
// Is this an RX interrupt?
    if(mU1RXGetIntFlag())
    { 
        
        char rxData = (char)ReadUART1();
        switch (i) {
            case 0:
                receiver_rx = rxData;
                i++;
                break;
            case 1:
                sender_rx = rxData;
                i++;
                break;
            case 2:
                command = rxData;
                i++;
                break;
            case 3:
                payload = rxData;
                i = 0;
                break;              
            
        }
        
        
        
// Clear the RX interrupt Flag
        mU1RXClearIntFlag();
// Echo what we just received.
 //       putcUART1(ReadUART1());
    }
    
    if(mU1TXGetIntFlag())
    { 
        mU1TXClearIntFlag();
    }
    return;
}
