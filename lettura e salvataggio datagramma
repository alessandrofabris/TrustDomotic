// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
'use strict';
var SerialPort = require('serialport');// include the library
var Protocol = require('azure-iot-device-mqtt').Mqtt;
var Client = require('azure-iot-device').Client;
var Message = require('azure-iot-device').Message;




var portName = "/dev/ttyUSB0"
var myPort = new SerialPort(portName, 9600);


var Readline = SerialPort.parsers.Readline; // make instance of Readline parser
var parser = new Readline(); // make a new parser to read ASCII lines
myPort.pipe(parser); // pipe the serial stream to the parser

// String containing Hostname, Device Id & Device Key in the following formats:
//  "HostName=<iothub_host_name>;DeviceId=<device_id>;SharedAccessKey=<device_key>"
var connectionString = 'HostName=TrustDomotic.azure-devices.net;DeviceId=trustBerryPi;SharedAccessKey=VasCfHa09Qb6UdxJhmlYxfRj97dWLo4EVMfCJ3a/s+Y=';
/*
var connectionString = process.env.DEVICE_CONNECTION_STRING;
if (!connectionString) {
  console.log('Please set the DEVICE_CONNECTION_STRING environment variable.');
  process.exit(-1);
}*/

// fromConnectionString must specify a transport constructor, coming from any transport package.
var client = Client.fromConnectionString(connectionString, Protocol); //connessione IoT Hub


var post_invio ='1MPa';
//var post_invio2 = '1MCa';
myPort.write(post_invio);
//myPort.write(post_invio2);

/*
var send;

function richiamoTemporizzato(){
	send = setTimeout(invioRichiesta, 2000);
}

function invioRichiesta() {
	myPort.write(post_invio);
	myPort.write(post_invio2);
}
*/

parser.on('data', readSerialData);

var connectCallback = function (err) {
  if (err) {
    console.error('Could not connect: ' + err.message);
  } else {
    console.log('Client connected');
    client.on('message', function (msg) {
      console.log('Id: ' + msg.messageId + ' Body: ' + msg.data);
      // When using MQTT the following line is a no-op.
      client.complete(msg, printResultFor('completed'));
      // When completing a message, the service that sent the C2D message is notified that the message has been processed.
      // When rejecting a message, the service that sent the C2D message is notified that the message won't be processed by the device. the method to use is client.reject(msg, callback).
      // When abandoning the message, IoT Hub will immediately try to resend it. The method to use is client.abandon(msg, callback).
      // MQTT is simpler: it accepts the message by default, and doesn't support rejecting or abandoning a message.
    });

    // Create a message and send it to the IoT Hub every two seconds
      /*
    var sendInterval = setInterval(function () {
      var windSpeed = 10 + (Math.random() * 4); // range: [10, 14]
      var temperature = 20 + (Math.random() * 10); // range: [20, 30]
      var humidity = 60 + (Math.random() * 20); // range: [60, 80]
      var timeStamp = new Date();
      var data = JSON.stringify({ deviceId: 'trustBerryPi', windSpeed: windSpeed, temperature: temperature, humidity: humidity, timeStamp: timeStamp });
      var message = new Message(data);
      message.properties.add('temperatureAlert', (temperature > 28) ? 'true' : 'false');
      console.log('Sending message: ' + message.getData());
      client.sendEvent(message, printResultFor('send'));
    }, 2000);
        */
    client.on('error', function (err) {
      console.error(err.message);
    });

    client.on('disconnect', function () {
      clearInterval(sendInterval);
      client.removeAllListeners();
      client.open(connectCallback);
    });
  }
};

client.open(connectCallback);

// Helper function to print results in the console
function printResultFor(op) {
  return function printResult(err, res) {
    if (err) console.log(op + ' error: ' + err.toString());
    if (res) console.log(op + ' status: ' + res.constructor.name);
  };
}

function readSerialData(data) {
    console.log(data);
    const string = data;
    let IndirizzoArrivo = string.charAt(0);
    let IndirizzoInvio = string.charAt(1);
    let comando = string.charAt(2);
    let payload = string.charAt(3);

    var json =  "{" + "\""+ "IndirizzoArrivo"+ "\": "+ "\"" + IndirizzoArrivo + "\"" + ", " +
        "\""+ "IndirizzoInvio"+ "\": "+ "\"" + IndirizzoInvio + "\"" + ", " +
        "\""+ "comando"+ "\": "+ "\"" + comando + "\"" + ", " +
        "\""+ "payload"+ "\": "+ "\"" + payload + "\"" +
        "}";

    var provace = JSON.parse(json);
    console.log(provace);

}


